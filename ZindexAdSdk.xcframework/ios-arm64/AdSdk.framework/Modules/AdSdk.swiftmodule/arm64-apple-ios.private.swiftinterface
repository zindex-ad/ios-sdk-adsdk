// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AdSdk
import AVFoundation
import AVKit
@_exported import AdSdk
import Combine
import CommonCrypto
import CoreLocation
import CoreTelephony
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@_hasMissingDesignatedInitializers public class AdAdapterFactory {
  public static let shared: AdSdk.AdAdapterFactory
  public func registerCustomAdapter(_ adapterClass: any AdSdk.AdAdapter.Type, for adType: AdSdk.AdType, platform: Swift.String? = nil)
  public func createAdapter(for adType: AdSdk.AdType, platform: Swift.String) -> (any AdSdk.AdAdapter)?
  public func createAdapterByPosid(_ posid: Swift.String, platform: Swift.String) -> (any AdSdk.AdAdapter)?
  public func getSupportedAdTypes(for platform: Swift.String) -> [AdSdk.AdType]
  public func getRegisteredPlatforms() -> [Swift.String]
  public func platformSupportsAdType(_ platform: Swift.String, adType: AdSdk.AdType) -> Swift.Bool
  public func createAdapter(for adType: AdSdk.AdType) -> (any AdSdk.AdAdapter)?
  public func createAdapter(for adTypeString: Swift.String) -> (any AdSdk.AdAdapter)?
  public func createAdapterByPosid(_ posid: Swift.String) -> (any AdSdk.AdAdapter)?
  public func createAdapters(for adTypes: [AdSdk.AdType]) -> [AdSdk.AdType : any AdSdk.AdAdapter]
  public func supportsAdType(_ adType: AdSdk.AdType) -> Swift.Bool
  public func getSupportedAdTypes() -> [AdSdk.AdType]
  public func getAdapterClassName(for adType: AdSdk.AdType) -> Swift.String
  @objc deinit
}
extension AdSdk.AdAdapterFactory {
  public func createAdapter(for adType: AdSdk.AdType, with configuration: [Swift.String : Any]) -> (any AdSdk.AdAdapter)?
}
extension AdSdk.AdAdapterFactory {
  public func createBannerAdapterExample() -> AdSdk.BannerAdAdapter?
  public func createRewardVideoAdapterExample() -> AdSdk.RewardVideoAdAdapter?
  public func createSplashAdapterExample() -> AdSdk.SplashAdAdapter?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AdAdapterRegistry : ObjectiveC.NSObject {
  public static let shared: AdSdk.AdAdapterRegistry
  public func registerAdapter(_ adapterClass: any AdSdk.AdAdapter.Type, platform: Swift.String, adType: AdSdk.AdType, metadata: AdSdk.AdapterMetadata? = nil)
  public func getAdapterClass(platform: Swift.String, adType: AdSdk.AdType) -> (any AdSdk.AdAdapter.Type)?
  public func getSupportedAdTypes(for platform: Swift.String) -> [AdSdk.AdType]
  public func getRegisteredPlatforms() -> [Swift.String]
  public func platformSupportsAdType(_ platform: Swift.String, adType: AdSdk.AdType) -> Swift.Bool
  public func getAdapterMetadata(platform: Swift.String, adType: AdSdk.AdType) -> AdSdk.AdapterMetadata?
  public func registerAdapters(_ adapters: [AdSdk.AdapterRegistration])
  public func loadAdaptersFromConfig(_ configPath: Swift.String)
  public func loadAdaptersFromRemote(_ url: Foundation.URL, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@objc public class AdapterMetadata : ObjectiveC.NSObject {
  final public let version: Swift.String
  final public let adapterDescription: Swift.String
  final public let capabilities: [Swift.String]
  final public let requirements: [Swift.String : Any]
  public init(version: Swift.String, description: Swift.String, capabilities: [Swift.String], requirements: [Swift.String : Any] = [:])
  @objc deinit
}
@objc public class AdapterRegistration : ObjectiveC.NSObject {
  final public let adapterClass: any AdSdk.AdAdapter.Type
  final public let platform: Swift.String
  final public let adType: AdSdk.AdType
  final public let metadata: AdSdk.AdapterMetadata?
  public init(adapterClass: any AdSdk.AdAdapter.Type, platform: Swift.String, adType: AdSdk.AdType, metadata: AdSdk.AdapterMetadata? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BannerAdAdapter : AdSdk.AdAdapterImpl {
  open var bannerView: UIKit.UIView?
  open var bannerContainer: UIKit.UIView?
  open var isVisible: Swift.Bool
  open var visibilityTimer: Foundation.Timer?
  open var refreshTimer: Foundation.Timer?
  open var autoRefreshInterval: Swift.Double
  override open func showAsync(in container: UIKit.UIView) async throws
  open func manualRefresh()
  open func setAutoRefreshInterval(_ interval: Foundation.TimeInterval)
  open func isBannerVisible() -> Swift.Bool
  open func adjustPosition(to newPosition: CoreFoundation.CGPoint)
  open func adjustSize(to newSize: CoreFoundation.CGSize)
  override open func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BaseAdAdapter : ObjectiveC.NSObject, AdSdk.AdAdapter {
  weak public var ad: AdSdk.BaseAd?
  weak public var listener: (any AdSdk.AdListener)?
  public var posid: Swift.String
  public var adContainer: UIKit.UIView?
  public func setAdContainer(_ container: UIKit.UIView)
  public func getAdContainer() -> UIKit.UIView?
  public func setAd(_ ad: AdSdk.BaseAd)
  open func load(posid: Swift.String)
  open func show()
  open func getECPM() -> Swift.Float
  public func setAdListener(_ listener: any AdSdk.AdListener)
  public func isAdapterLoaded() -> Swift.Bool
  public func cleanup()
  open func loadAsync(posid: Swift.String) async throws
  open func showAsync(in container: UIKit.UIView) async throws
  open func notifyAdLoadSuccess()
  open func notifyAdLoadFailed(error: AdSdk.AdError)
  open func notifyAdClicked()
  open func notifyAdImpression()
  open func notifyAdClosed()
  open func isValidAd() -> Swift.Bool
  open func getViewController() -> UIKit.UIViewController?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AdAdapterImpl : AdSdk.BaseAdAdapter {
  override open func loadAsync(posid: Swift.String) async throws
  override open func showAsync(in container: UIKit.UIView) async throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class InterstitialAdAdapter : AdSdk.AdAdapterImpl {
  override open func loadAsync(posid: Swift.String) async throws
  override open func showAsync(in container: UIKit.UIView? = nil) async throws
  public func isInterstitialShowing() -> Swift.Bool
  public func getShowDuration() -> Foundation.TimeInterval
  public func forceClose()
  override open func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NativeAdAdapter : AdSdk.AdAdapterImpl {
  override open func loadAsync(posid: Swift.String) async throws
  override open func showAsync(in container: UIKit.UIView) async throws
  open func isNativeAdVisible() -> Swift.Bool
  open func adjustPosition(to newPosition: CoreFoundation.CGPoint)
  open func adjustSize(to newSize: CoreFoundation.CGSize)
  override open func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RewardVideoAdAdapter : AdSdk.AdAdapterImpl {
  override open func loadAsync(posid: Swift.String) async throws
  override open func showAsync(in container: UIKit.UIView) async throws
  open func isRewardVideoPlaying() -> Swift.Bool
  open func isRewardVideoCompleted() -> Swift.Bool
  open func isRewardVideoSkipped() -> Swift.Bool
  open func getPlayDuration() -> Foundation.TimeInterval
  open func getRewardType() -> Swift.String
  open func getRewardAmount() -> Swift.Int
  open func setRewardConfiguration(type: Swift.String, amount: Swift.Int)
  override open func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class SplashAdAdapter : AdSdk.AdAdapterImpl {
  override open func loadAsync(posid: Swift.String) async throws
  override open func showAsync(in container: UIKit.UIView) async throws
  open func isSplashShowing() -> Swift.Bool
  open func getShowDuration() -> Foundation.TimeInterval
  open func forceClose()
  override open func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class BannerAd : AdSdk.BaseAd {
  public init(viewController: UIKit.UIViewController, container: UIKit.UIView)
  override public func createAdLoader() -> (any AdSdk.AdLoader)?
  override public func getContainer() -> UIKit.UIView?
  override public func getAdType() -> AdSdk.AdType
  override public func show()
  public func setBannerView(_ view: UIKit.UIView)
  public func getBannerView() -> UIKit.UIView?
  public func refreshAd()
  public func setAdSize(_ size: AdSdk.AdSize)
  override public func destroy()
  @objc deinit
}
@objc open class BaseAd : ObjectiveC.NSObject, AdSdk.Ad {
  weak public var listener: (any AdSdk.AdListener)?
  public var posid: Swift.String
  public var isLoaded: Swift.Bool
  public var adSize: AdSdk.AdSize?
  public var adLoader: (any AdSdk.AdLoader)?
  public init(viewController: UIKit.UIViewController)
  @discardableResult
  open func load(posid: Swift.String) -> Swift.Bool
  open func show()
  open func getECPM() async -> Swift.Double
  public func getViewController() -> UIKit.UIViewController?
  open func destroy()
  open func createAdLoader() -> (any AdSdk.AdLoader)?
  open func getContainer() -> UIKit.UIView?
  open func getAdType() -> AdSdk.AdType
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InterstitialAd : AdSdk.BaseAd {
  override public func createAdLoader() -> (any AdSdk.AdLoader)?
  override public func getContainer() -> UIKit.UIView?
  override public func getAdType() -> AdSdk.AdType
  override public func show()
  public func setInterstitialViewController(_ viewController: UIKit.UIViewController)
  public func setInterstitialData(_ data: AdSdk.InterstitialAdData)
  public func getInterstitialData() -> AdSdk.InterstitialAdData?
  public func showInterstitial()
  public func closeInterstitial()
  public func isInterstitialShowing() -> Swift.Bool
  public func getAdStatus() -> Swift.String
  public func canShowAd() -> Swift.Bool
  override public func destroy()
  override public init(viewController: UIKit.UIViewController)
  @objc deinit
}
public struct InterstitialAdData {
  public let title: Swift.String
  public let description: Swift.String?
  public let imageUrl: Swift.String?
  public let actionText: Swift.String
  public let advertiser: Swift.String?
  public init(title: Swift.String, description: Swift.String? = nil, imageUrl: Swift.String? = nil, actionText: Swift.String = "立即查看", advertiser: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers public class NativeAd : AdSdk.BaseAd {
  override public init(viewController: UIKit.UIViewController)
  public init(viewController: UIKit.UIViewController, container: UIKit.UIView)
  override public func createAdLoader() -> (any AdSdk.AdLoader)?
  override public func getContainer() -> UIKit.UIView?
  override public func getAdType() -> AdSdk.AdType
  override public func show()
  public func setNativeAdView(_ view: UIKit.UIView)
  public func getNativeAdView() -> UIKit.UIView?
  public func refreshAd()
  override public func destroy()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RewardVideoAd : AdSdk.BaseAd {
  override public func createAdLoader() -> (any AdSdk.AdLoader)?
  override public func getContainer() -> UIKit.UIView?
  override public func getAdType() -> AdSdk.AdType
  override public func show()
  public func setRewardDelegate(_ delegate: (any AdSdk.RewardVideoAdDelegate)?)
  override public func destroy()
  override public init(viewController: UIKit.UIViewController)
  @objc deinit
}
public protocol RewardVideoAdDelegate : AnyObject {
  func onRewardEarned(rewardType: Swift.String, rewardAmount: Swift.Int)
  func onRewardVideoStarted()
  func onRewardVideoCompleted()
  func onRewardVideoSkipped()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class RewardVideoMockPlayer : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers public class SplashAd : AdSdk.BaseAd {
  override public init(viewController: UIKit.UIViewController)
  override public func createAdLoader() -> (any AdSdk.AdLoader)?
  override public func getContainer() -> UIKit.UIView?
  override public func getAdType() -> AdSdk.AdType
  override public func show()
  public func setSplashView(_ view: UIKit.UIView)
  public func getSplashView() -> UIKit.UIView?
  public func setSplashDuration(_ duration: Foundation.TimeInterval)
  override public func destroy()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AdSourceManager {
  public static let shared: AdSdk.AdSourceManager
  public func initialize()
  public func registerAdSource(_ source: any AdSdk.AdSource)
  public func getAdSource(_ platformName: Swift.String) -> (any AdSdk.AdSource)?
  public func getAdSourceByType(_ adType: AdSdk.AdType) -> [any AdSdk.AdSource]
  public func getAllAdSources() -> [any AdSdk.AdSource]
  public func createAdapter(platformName: Swift.String, adType: AdSdk.AdType) -> (any AdSdk.AdAdapter)?
  public func initializeAll(configs: [AdSdk.AppidMap])
  public func getRegisteredPlatforms() -> [Swift.String]
  public func isAdSourceRegistered(_ platformName: Swift.String) -> Swift.Bool
  public func unregisterAdSource(_ platformName: Swift.String)
  public func getAdSourceStats() -> [Swift.String : Any]
  @objc deinit
}
public struct AdSlotConfig : Swift.Codable {
  public let posid: Swift.String
  public let isEnable: Swift.Bool
  public let thirdposid: Swift.String
  public let ecpm: Swift.Double
  public init(posid: Swift.String, isEnable: Swift.Bool, thirdposid: Swift.String, ecpm: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdConfigData : Swift.Codable {
  public var network: AdSdk.NetworkConfig
  public var server: AdSdk.ServerConfig
  public var ui: AdSdk.UIConfig
  public var debug: AdSdk.DebugConfig
  public var errors: [Swift.Int : Swift.String]
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NetworkConfig : Swift.Codable {
  public var requestTimeoutMs: Swift.Int64
  public var connectTimeoutMs: Swift.Int64
  public var socketTimeoutMs: Swift.Int64
  public var adLoadTimeoutMs: Swift.Int64
  public var maxRetryCount: Swift.Int
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ServerConfig : Swift.Codable {
  public var defaultBaseUrl: Swift.String
  public var defaultInnerUrl: Swift.String
  public var apiVersion: Swift.String
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UIConfig : Swift.Codable {
  public var splashDurationMs: Swift.Int64
  public var enableImageCrossfade: Swift.Bool
  public var closeBtnSize: Swift.Int
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DebugConfig : Swift.Codable {
  public var enableLog: Swift.Bool
  public var logLevel: Swift.String
  public var testMode: Swift.Bool
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SdkConfig : Swift.Codable {
  public let msg: Swift.String
  public let reason: Swift.String
  public let result: AdSdk.SdkConfigResult
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SdkConfigResult : Swift.Codable {
  public let infoConfigBoList: [AdSdk.AppidMap]
  public let posIdRelationList: [AdSdk.PosidMap]
  public let reportUrlList: [Swift.String]?
  public let channelUrlList: [AdSdk.ChannelURL]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppidMap : Swift.Codable {
  public let id: Swift.Int
  public let name: Swift.String
  public let appid: Swift.String
  public let thirdappid: Swift.String
  public let type: Swift.String
  public let sort: Swift.Int
  public let expand: Swift.String
  public let download: Swift.String
  public let tip: Swift.String
  public var platformName: Swift.String {
    get
  }
  public var thirdAppId: Swift.String {
    get
  }
  public var isEnable: Swift.Bool {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PosidMap : Swift.Codable {
  public let id: Swift.Int
  public let name: Swift.String
  public let appid: Swift.String
  public let posid: Swift.String
  public let thirdappid: Swift.String
  public let thirdposid: Swift.String
  public let type: Swift.String
  public let price: Swift.Double
  public let countdown: Swift.Int
  public var ecpm: Swift.Double {
    get
  }
  public var weight: Swift.Int {
    get
  }
  public var isEnable: Swift.Bool {
    get
  }
  public init(appid: Swift.String, posid: Swift.String, type: Swift.String, thirdappid: Swift.String, thirdposid: Swift.String, ecpm: Swift.Double = 100.0, weight: Swift.Int = 100, isEnable: Swift.Bool = true)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChannelURL : Swift.Codable {
  public let name: Swift.String
  public let baseUrl: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class ZindexAd : ObjectiveC.NSObject {
  @objc public static let shared: AdSdk.ZindexAd
  @objc public var isLogEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var appId: Swift.String
  @objc public var context: UIKit.UIApplication?
  @objc public func initialize(appId: Swift.String, baseUrl: Swift.String = "", completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc public func getInitialized() -> Swift.Bool
  @objc public func setLogEnabled(_ enabled: Swift.Bool)
  @objc public func setTestMode(_ testMode: Swift.Bool)
  @objc public func getVersion() -> Swift.String
  @objc public func getAppId() -> Swift.String
  @objc public func setNetworkTimeout(requestTimeout: Foundation.TimeInterval, connectTimeout: Foundation.TimeInterval, socketTimeout: Foundation.TimeInterval)
  @objc public func resetConfig()
  @objc deinit
}
public enum AdType : Swift.String, Swift.CaseIterable, Swift.Codable {
  case unknown
  case banner
  case interstitial
  case native
  case rewarded
  case splash
  public var displayName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AdSdk.AdType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [AdSdk.AdType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct AdSize {
  public let width: CoreFoundation.CGFloat
  public let height: CoreFoundation.CGFloat
  public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  public static let banner: AdSdk.AdSize
  public static let largeBanner: AdSdk.AdSize
  public static let mediumRectangle: AdSdk.AdSize
  public static let fullBanner: AdSdk.AdSize
  public static let leaderboard: AdSdk.AdSize
  public static let smartBanner: AdSdk.AdSize
  public var cgSize: CoreFoundation.CGSize {
    get
  }
}
public protocol Ad : AnyObject {
  var listener: (any AdSdk.AdListener)? { get set }
  var posid: Swift.String { get set }
  var isLoaded: Swift.Bool { get }
  var adSize: AdSdk.AdSize? { get set }
  func load(posid: Swift.String) -> Swift.Bool
  func show()
  func getECPM() async -> Swift.Double
  func getViewController() -> UIKit.UIViewController?
  func destroy()
}
public protocol AdAdapter : AnyObject {
  var ad: AdSdk.BaseAd? { get set }
  var listener: (any AdSdk.AdListener)? { get set }
  var posid: Swift.String { get set }
  func setAd(_ ad: AdSdk.BaseAd)
  func load(posid: Swift.String)
  func loadAsync(posid: Swift.String) async throws
  func show()
  func showAsync(in container: UIKit.UIView) async throws
  func getECPM() -> Swift.Float
  func setAdListener(_ listener: any AdSdk.AdListener)
  func cleanup()
  func isAdapterLoaded() -> Swift.Bool
}
public protocol AdSource : AnyObject {
  var platformName: Swift.String { get }
  var supportedAdTypes: [AdSdk.AdType] { get }
  func createAdapter(adType: AdSdk.AdType) -> (any AdSdk.AdAdapter)?
  func initialize(appid: Swift.String)
}
public protocol AdLoader : AnyObject {
  func loadAd(posid: Swift.String)
  func showAd(posid: Swift.String)
  func onResumed()
  func onPaused()
  func cleanup()
}
public protocol LoadingStrategy : AnyObject {
  func shouldLoadSync(adType: AdSdk.AdType) -> Swift.Bool
  func getLoadTimeout(adType: AdSdk.AdType) -> Foundation.TimeInterval
  func getRetryCount(adType: AdSdk.AdType) -> Swift.Int
}
@_hasMissingDesignatedInitializers public class AdReporter {
  public static func reportImpression(_ ad: AdSdk.CustomAd)
  public static func reportClick(_ ad: AdSdk.CustomAd)
  public static func reportInstall(_ ad: AdSdk.CustomAd)
  public static func reportInstalled(_ ad: AdSdk.CustomAd)
  public static func reportDownload(_ ad: AdSdk.CustomAd)
  public static func reportDownloaded(_ ad: AdSdk.CustomAd)
  public static func reportDeepLinkStart(_ ad: AdSdk.CustomAd)
  public static func reportDeepLinkSuccess(_ ad: AdSdk.CustomAd)
  public static func reportDeepLinkFail(_ ad: AdSdk.CustomAd)
  @objc deinit
}
extension AdSdk.CustomAd {
  public func reportImpression()
  public func reportClick()
  public func reportInstall()
  public func reportInstalled()
  public func reportDownload()
  public func reportDownloaded()
  public func reportDeepLinkStart()
  public func reportDeepLinkSuccess()
  public func reportDeepLinkFail()
}
public struct AdReq : Swift.Codable {
  public let app: AdSdk.App
  public let adslot: AdSdk.Adslot
  public let device: AdSdk.Device
  public let geo: AdSdk.Geo
  public init(app: AdSdk.App, adslot: AdSdk.Adslot, device: AdSdk.Device, geo: AdSdk.Geo)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct App : Swift.Codable {
  public let name: Swift.String
  public let pkg: Swift.String
  public let ver: Swift.String
  public init(name: Swift.String, pkg: Swift.String, ver: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Adslot : Swift.Codable {
  public let appid: Swift.String
  public let adid: Swift.String
  public let width: Swift.Int
  public let height: Swift.Int
  public let bidfloor: Swift.Int
  public init(appid: Swift.String, adid: Swift.String, width: Swift.Int, height: Swift.Int, bidfloor: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct User : Swift.Codable {
  public let id: Swift.String
  public let yob: Swift.Int
  public let gender: Swift.String
  public init(id: Swift.String, yob: Swift.Int, gender: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Device : Swift.Codable {
  public let sw: Swift.Int
  public let sh: Swift.Int
  public let density: Swift.Float
  public let ppi: Swift.Int
  public let inch: Swift.Float
  public let orientation: Swift.Int
  public let language: Swift.String
  public let country: Swift.String
  public let timezone: Swift.String
  public let brand: Swift.String
  public let model: Swift.String
  public let os: Swift.String
  public let osv: Swift.String
  public let ua: Swift.String
  public let devicetype: Swift.Int
  public let imei: Swift.String
  public let androidid: Swift.String
  public let oaid: Swift.String
  public let api_level: Swift.Int
  public let idfa: Swift.String
  public let idfv: Swift.String
  public let openudid: Swift.String
  public init(sw: Swift.Int, sh: Swift.Int, density: Swift.Float, ppi: Swift.Int, inch: Swift.Float, orientation: Swift.Int, language: Swift.String, country: Swift.String, timezone: Swift.String, brand: Swift.String, model: Swift.String, os: Swift.String, osv: Swift.String, ua: Swift.String, devicetype: Swift.Int, imei: Swift.String, androidid: Swift.String, oaid: Swift.String, api_level: Swift.Int, idfa: Swift.String, idfv: Swift.String, openudid: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Network : Swift.Codable {
  public let connectiontype: Swift.Int
  public let operatorName: Swift.String
  public init(connectiontype: Swift.Int, operatorName: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Geo : Swift.Codable {
  public let lat: Swift.Double
  public let lon: Swift.Double
  public init(lat: Swift.Double, lon: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AdRequestBuilder {
  public static func buildAdReq(posid: Swift.String, adType: AdSdk.AdType) -> AdSdk.AdReq
  @objc deinit
}
public struct CustomAdRes : Swift.Codable {
  public let msg: Swift.String
  public let reason: Swift.String?
  public let result: AdSdk.CustomAd?
  public init(msg: Swift.String, reason: Swift.String? = nil, result: AdSdk.CustomAd? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomAd : Swift.Codable {
  public let id: Swift.String
  public let ctype: Swift.Int
  public let title: Swift.String
  public let desc: Swift.String?
  public let source: Swift.String?
  public let icon: Swift.String?
  public let image: Swift.String?
  public let ldp: Swift.String
  public let deeplink: Swift.String
  public let durl: Swift.String?
  public let ulink: Swift.String?
  public let display: [Swift.String]?
  public let click: [Swift.String]?
  public let install: [Swift.String]?
  public let installed: [Swift.String]?
  public let download: [Swift.String]?
  public let downloaded: [Swift.String]?
  public let dpt: [Swift.String]?
  public let dps: [Swift.String]?
  public let dpf: [Swift.String]?
  public let video: AdSdk.AdVideo?
  public let price: Swift.Int
  public init(id: Swift.String, ctype: Swift.Int, title: Swift.String, desc: Swift.String? = nil, source: Swift.String? = nil, icon: Swift.String? = nil, image: Swift.String? = nil, ldp: Swift.String = "", deeplink: Swift.String = "", durl: Swift.String? = nil, ulink: Swift.String? = nil, display: [Swift.String]? = nil, click: [Swift.String]? = nil, install: [Swift.String]? = nil, installed: [Swift.String]? = nil, download: [Swift.String]? = nil, downloaded: [Swift.String]? = nil, dpt: [Swift.String]? = nil, dps: [Swift.String]? = nil, dpf: [Swift.String]? = nil, video: AdSdk.AdVideo? = nil, price: Swift.Int = 0)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdVideo : Swift.Codable {
  public let title: Swift.String
  public let desc: Swift.String?
  public let icon: Swift.String?
  public let image: Swift.String?
  public let video: Swift.String?
  public let duration: Swift.Int
  public let size: Swift.Int
  public let url: Swift.String
  public init(title: Swift.String, desc: Swift.String? = nil, icon: Swift.String? = nil, image: Swift.String? = nil, video: Swift.String? = nil, duration: Swift.Int = 0, size: Swift.Int = 0, url: Swift.String = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CustomAdType : Swift.Int, Swift.CaseIterable {
  case h5
  case download
  case deeplink
  case qdtDownload
  case miniProgram
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AdSdk.CustomAdType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [AdSdk.CustomAdType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum DeviceType : Swift.Int, Swift.CaseIterable {
  case phone
  case tablet
  case tv
  case car
  case other
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AdSdk.DeviceType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [AdSdk.DeviceType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum NetworkType : Swift.Int, Swift.CaseIterable {
  case unknown
  case cellular
  case wifi
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AdSdk.NetworkType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [AdSdk.NetworkType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CustomAdHelper {
  @objc deinit
}
public class CustomAdClient {
  public init(httpClient: any AdSdk.HTTPClient = URLSessionHTTPClient())
  public func getAd(posid: Swift.String, adType: AdSdk.AdType) async -> AdSdk.CustomAd?
  @objc deinit
}
extension AdSdk.CustomAdClient {
  public static let shared: AdSdk.CustomAdClient
  public func getBannerAd(posid: Swift.String) async -> AdSdk.CustomAd?
  public func getInterstitialAd(posid: Swift.String) async -> AdSdk.CustomAd?
  public func getNativeAd(posid: Swift.String) async -> AdSdk.CustomAd?
  public func getRewardVideoAd(posid: Swift.String) async -> AdSdk.CustomAd?
  public func getSplashAd(posid: Swift.String) async -> AdSdk.CustomAd?
}
extension AdSdk.CustomAdClient {
  public func reportAdDisplay(_ ad: AdSdk.CustomAd) async
  public func reportAdClick(_ ad: AdSdk.CustomAd) async
  public func reportAdInstall(_ ad: AdSdk.CustomAd) async
  public func reportAdInstalled(_ ad: AdSdk.CustomAd) async
  public func reportAdDownload(_ ad: AdSdk.CustomAd) async
  public func reportAdDownloaded(_ ad: AdSdk.CustomAd) async
  public func reportDeeplinkOpen(_ ad: AdSdk.CustomAd) async
  public func reportDeeplinkSuccess(_ ad: AdSdk.CustomAd) async
  public func reportDeeplinkFailed(_ ad: AdSdk.CustomAd) async
}
@objc @_inheritsConvenienceInitializers public class CustomAdSource : ObjectiveC.NSObject, AdSdk.AdSource {
  final public let platformName: Swift.String
  final public let supportedAdTypes: [AdSdk.AdType]
  public func createAdapter(adType: AdSdk.AdType) -> (any AdSdk.AdAdapter)?
  public func initialize(appid: Swift.String)
  public func getAppId() -> Swift.String
  public func getInitializationStatus() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CustomBannerAdapter : AdSdk.BannerAdAdapter {
  override public func loadAsync(posid: Swift.String) async throws
  override public func showAsync(in container: UIKit.UIView) async throws
  override public func getECPM() -> Swift.Float
  override public func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CustomInterstitialAdapter : AdSdk.InterstitialAdAdapter {
  override public func loadAsync(posid: Swift.String) async throws
  override public func showAsync(in container: UIKit.UIView? = nil) async throws
  override public func getECPM() -> Swift.Float
  override public func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CustomNativeAdapter : AdSdk.NativeAdAdapter {
  override public func loadAsync(posid: Swift.String) async throws
  override public func showAsync(in container: UIKit.UIView) async throws
  override public func getECPM() -> Swift.Float
  override public func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CustomRewardVideoAdapter : AdSdk.RewardVideoAdAdapter {
  override public func loadAsync(posid: Swift.String) async throws
  override public func showAsync(in container: UIKit.UIView) async throws
  override public func getECPM() -> Swift.Float
  override public func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CustomSplashAdapter : AdSdk.SplashAdAdapter {
  override public func loadAsync(posid: Swift.String) async throws
  override public func showAsync(in container: UIKit.UIView? = nil) async throws
  override public func getECPM() -> Swift.Float
  public func closeSplashAd()
  override public func cleanup()
  @objc override dynamic public init()
  @objc deinit
}
public enum HTTPResult<T> {
  case success(T)
  case failure(Swift.Int, Swift.String)
  case networkError(any Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var data: T? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
public protocol HTTPClient {
  func get(url: Swift.String, headers: [Swift.String : Swift.String]) async -> AdSdk.HTTPResult<Swift.String>
  func post(url: Swift.String, body: Swift.String, headers: [Swift.String : Swift.String]) async -> AdSdk.HTTPResult<Swift.String>
}
public class URLSessionHTTPClient : AdSdk.HTTPClient {
  public init()
  public func get(url: Swift.String, headers: [Swift.String : Swift.String] = [:]) async -> AdSdk.HTTPResult<Swift.String>
  public func post(url: Swift.String, body: Swift.String, headers: [Swift.String : Swift.String] = [:]) async -> AdSdk.HTTPResult<Swift.String>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HTTPClientFactory {
  public static func create() -> any AdSdk.HTTPClient
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AdError : Foundation.NSError, @unchecked Swift.Sendable {
  public static let ERROR_INTERNAL: Swift.Int
  public static let ERROR_NETWORK: Swift.Int
  public static let ERROR_TIMEOUT: Swift.Int
  public static let ERROR_NO_FILL: Swift.Int
  public static let ERROR_INVALID_REQUEST: Swift.Int
  public static let ERROR_INVALID_CONFIG: Swift.Int
  public static let ERROR_NO_CONFIG: Swift.Int
  public static let ERROR_CONFIG_EXPIRED: Swift.Int
  public static let ERROR_LOAD_FAILED: Swift.Int
  public static let ERROR_LOADING: Swift.Int
  public static let ERROR_NO_ADAPTER: Swift.Int
  public static let ERROR_ADAPTER_FAILED: Swift.Int
  public static let ERROR_SHOW_FAILED: Swift.Int
  public static let ERROR_AD_EXPIRED: Swift.Int
  public static let ERROR_AD_NOT_READY: Swift.Int
  public static let ERROR_LIFECYCLE: Swift.Int
  public static let ERROR_THREAD: Swift.Int
  final public let errorCode: Swift.Int
  final public let errorMessage: Swift.String
  public init(code: Swift.Int, message: Swift.String)
  public static func createLoadError(_ detail: Swift.String) -> AdSdk.AdError
  public static func createShowError(_ detail: Swift.String) -> AdSdk.AdError
  public static func createTimeoutError() -> AdSdk.AdError
  public static func createNetworkError(_ detail: Swift.String) -> AdSdk.AdError
  public static func createLifecycleError(_ detail: Swift.String) -> AdSdk.AdError
  public static func createConfigError(_ detail: Swift.String) -> AdSdk.AdError
  public static func createNoFillError() -> AdSdk.AdError
  public static func createNoAdapterError(_ platformName: Swift.String) -> AdSdk.AdError
  public static func createAdapterFailedError(_ platformName: Swift.String, detail: Swift.String) -> AdSdk.AdError
  public static func createInternalError(_ detail: Swift.String) -> AdSdk.AdError
  public static func getErrorMessage(_ code: Swift.Int) -> Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol AdListener {
  @objc func onAdLoadStarted(_ ad: Any)
  @objc func onAdLoadSuccess(_ ad: Any)
  @objc func onAdLoadFailed(_ ad: Any, error: AdSdk.AdError)
  @objc func onAdClicked(_ ad: Any)
  @objc func onAdImpression(_ ad: Any)
  @objc func onAdClosed(_ ad: Any)
  @objc func onAdPlayStarted(_ ad: Any)
  @objc func onAdPlayCompleted(_ ad: Any)
  @objc func onAdPlayFailed(_ ad: Any, error: AdSdk.AdError)
  @objc func onAdPaused(_ ad: Any)
  @objc func onAdResumed(_ ad: Any)
  @objc func onAdSkipped(_ ad: Any)
  @objc func onAdCountdown(_ ad: Any, remainingTime: Foundation.TimeInterval)
  @objc func onAdVolumeChanged(_ ad: Any, volume: Swift.Float)
  @objc func onAdFullscreenChanged(_ ad: Any, isFullscreen: Swift.Bool)
  @objc func onAdNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  @objc func onAdPerformanceMetrics(_ ad: Any, metrics: [Swift.String : Any])
  @objc func onAdLifecycleEvent(_ ad: Any, event: Swift.String, data: [Swift.String : Any]?)
}
extension AdSdk.AdListener {
  public func onAdLoadStarted(_ ad: Any)
  public func onAdLoadSuccess(_ ad: Any)
  public func onAdLoadFailed(_ ad: Any, error: AdSdk.AdError)
  public func onAdClicked(_ ad: Any)
  public func onAdImpression(_ ad: Any)
  public func onAdClosed(_ ad: Any)
  public func onAdPlayStarted(_ ad: Any)
  public func onAdPlayCompleted(_ ad: Any)
  public func onAdPlayFailed(_ ad: Any, error: AdSdk.AdError)
  public func onAdPaused(_ ad: Any)
  public func onAdResumed(_ ad: Any)
  public func onAdSkipped(_ ad: Any)
  public func onAdCountdown(_ ad: Any, remainingTime: Foundation.TimeInterval)
  public func onAdVolumeChanged(_ ad: Any, volume: Swift.Float)
  public func onAdFullscreenChanged(_ ad: Any, isFullscreen: Swift.Bool)
  public func onAdNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  public func onAdPerformanceMetrics(_ ad: Any, metrics: [Swift.String : Any])
  public func onAdLifecycleEvent(_ ad: Any, event: Swift.String, data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers public class BaseAdListenerExample : ObjectiveC.NSObject, AdSdk.AdListener {
  @objc public func onAdLoadStarted(_ ad: Any)
  @objc public func onAdLoadSuccess(_ ad: Any)
  @objc public func onAdLoadFailed(_ ad: Any, error: AdSdk.AdError)
  @objc public func onAdClicked(_ ad: Any)
  @objc public func onAdImpression(_ ad: Any)
  @objc public func onAdClosed(_ ad: Any)
  @objc public func onAdPlayStarted(_ ad: Any)
  @objc public func onAdPlayCompleted(_ ad: Any)
  @objc public func onAdPlayFailed(_ ad: Any, error: AdSdk.AdError)
  @objc public func onAdPaused(_ ad: Any)
  @objc public func onAdResumed(_ ad: Any)
  @objc public func onAdSkipped(_ ad: Any)
  @objc public func onAdCountdown(_ ad: Any, remainingTime: Foundation.TimeInterval)
  @objc public func onAdVolumeChanged(_ ad: Any, volume: Swift.Float)
  @objc public func onAdFullscreenChanged(_ ad: Any, isFullscreen: Swift.Bool)
  @objc public func onAdNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  @objc public func onAdPerformanceMetrics(_ ad: Any, metrics: [Swift.String : Any])
  @objc public func onAdLifecycleEvent(_ ad: Any, event: Swift.String, data: [Swift.String : Any]?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InterstitialAdListenerExample : AdSdk.BaseAdListenerExample, AdSdk.InterstitialListener {
  public func onInterstitialReadyToShow(_ ad: Any)
  public func onInterstitialShowStarted(_ ad: Any)
  public func onInterstitialShowCompleted(_ ad: Any)
  public func onInterstitialShowFailed(_ ad: Any, error: AdSdk.AdError)
  public func onInterstitialCloseStarted(_ ad: Any)
  public func onInterstitialCloseCompleted(_ ad: Any)
  public func onInterstitialCloseFailed(_ ad: Any, error: AdSdk.AdError)
  public func onInterstitialShowDuration(_ ad: Any, duration: Foundation.TimeInterval)
  public func onInterstitialShowPercentage(_ ad: Any, percentage: Swift.Float)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BannerAdListenerExample : AdSdk.BaseAdListenerExample, AdSdk.BannerListener {
  public func onBannerSizeChanged(_ ad: Any, oldSize: CoreFoundation.CGSize, newSize: CoreFoundation.CGSize)
  public func onBannerRefreshed(_ ad: Any)
  public func onBannerRefreshFailed(_ ad: Any, error: AdSdk.AdError)
  public func onBannerAutoPlayStarted(_ ad: Any)
  public func onBannerAutoPlayStopped(_ ad: Any)
  public func onBannerVisibilityChanged(_ ad: Any, isVisible: Swift.Bool, visibilityPercentage: Swift.Float)
  public func onBannerPositionChanged(_ ad: Any, oldPosition: CoreFoundation.CGPoint, newPosition: CoreFoundation.CGPoint)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RewardVideoAdListenerExample : AdSdk.BaseAdListenerExample, AdSdk.RewardVideoListener {
  @objc public func onRewardVideoStarted(_ ad: Any)
  @objc public func onRewardVideoCompleted(_ ad: Any)
  public func onRewardVideoFailed(_ ad: Any, error: AdSdk.AdError)
  @objc public func onRewardVideoClosed(_ ad: Any)
  @objc public func onRewardVideoRewarded(_ ad: Any, rewardType: Swift.String, rewardAmount: Swift.Int)
  @objc public func onRewardVideoSkipped(_ ad: Any)
  @objc public func onRewardVideoVerificationCompleted(_ ad: Any, reward: [Swift.String : Any])
  @objc public func onRewardVideoVerificationFailed(_ ad: Any, error: AdSdk.AdError)
  @objc public func onRewardVideoRewardStarted(_ ad: Any, reward: [Swift.String : Any])
  @objc public func onRewardVideoRewardCompleted(_ ad: Any, reward: [Swift.String : Any])
  @objc public func onRewardVideoRewardFailed(_ ad: Any, error: AdSdk.AdError)
  @objc public func onRewardVideoPlayStarted(_ ad: Any)
  @objc public func onRewardVideoPlayProgress(_ ad: Any, progress: Swift.Float)
  @objc public func onRewardVideoPlayFailed(_ ad: Any, error: AdSdk.AdError)
  @objc public func onRewardVideoPlayPaused(_ ad: Any)
  @objc public func onRewardVideoPlayResumed(_ ad: Any)
  @objc public func onRewardVideoPlayCompleted(_ ad: Any)
  @objc public func onRewardVideoPlaySkipped(_ ad: Any)
  @objc public func onRewardVideoBufferingStarted(_ ad: Any)
  @objc public func onRewardVideoBufferingProgress(_ ad: Any, progress: Swift.Float)
  @objc public func onRewardVideoBufferingCompleted(_ ad: Any)
  @objc public func onRewardVideoBufferingFailed(_ ad: Any, error: AdSdk.AdError)
  @objc public func onRewardVideoPreloadStarted(_ ad: Any)
  @objc public func onRewardVideoPreloadCompleted(_ ad: Any)
  @objc public func onRewardVideoPreloadFailed(_ ad: Any, error: AdSdk.AdError)
  @objc public func onRewardVideoShowTiming(_ ad: Any, timing: Swift.String)
  @objc public func onRewardVideoUserBehavior(_ ad: Any, behavior: Swift.String, details: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
public protocol BannerListener : AdSdk.AdListener {
  func onBannerSizeChanged(_ ad: Any, oldSize: CoreFoundation.CGSize, newSize: CoreFoundation.CGSize)
  func onBannerRefreshed(_ ad: Any)
  func onBannerRefreshFailed(_ ad: Any, error: AdSdk.AdError)
  func onBannerAutoPlayStarted(_ ad: Any)
  func onBannerAutoPlayStopped(_ ad: Any)
  func onBannerVisibilityChanged(_ ad: Any, isVisible: Swift.Bool, visibilityPercentage: Swift.Float)
  func onBannerPositionChanged(_ ad: Any, oldPosition: CoreFoundation.CGPoint, newPosition: CoreFoundation.CGPoint)
  func onBannerContainerChanged(_ ad: Any, oldContainer: UIKit.UIView?, newContainer: UIKit.UIView?)
  func onBannerContentLoadProgress(_ ad: Any, progress: Swift.Float)
  func onBannerContentRendered(_ ad: Any)
  func onBannerClickableAreaChanged(_ ad: Any, clickableArea: CoreFoundation.CGRect)
  func onBannerNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  func onBannerPerformanceMetrics(_ ad: Any, metrics: [Swift.String : Any])
}
extension AdSdk.BannerListener {
  public func onBannerSizeChanged(_ ad: Any, oldSize: CoreFoundation.CGSize, newSize: CoreFoundation.CGSize)
  public func onBannerRefreshed(_ ad: Any)
  public func onBannerRefreshFailed(_ ad: Any, error: AdSdk.AdError)
  public func onBannerAutoPlayStarted(_ ad: Any)
  public func onBannerAutoPlayStopped(_ ad: Any)
  public func onBannerVisibilityChanged(_ ad: Any, isVisible: Swift.Bool, visibilityPercentage: Swift.Float)
  public func onBannerPositionChanged(_ ad: Any, oldPosition: CoreFoundation.CGPoint, newPosition: CoreFoundation.CGPoint)
  public func onBannerContainerChanged(_ ad: Any, oldContainer: UIKit.UIView?, newContainer: UIKit.UIView?)
  public func onBannerContentLoadProgress(_ ad: Any, progress: Swift.Float)
  public func onBannerContentRendered(_ ad: Any)
  public func onBannerClickableAreaChanged(_ ad: Any, clickableArea: CoreFoundation.CGRect)
  public func onBannerNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  public func onBannerPerformanceMetrics(_ ad: Any, metrics: [Swift.String : Any])
}
public protocol InterstitialListener : AdSdk.AdListener {
  func onInterstitialReadyToShow(_ ad: Any)
  func onInterstitialShowStarted(_ ad: Any)
  func onInterstitialShowCompleted(_ ad: Any)
  func onInterstitialShowFailed(_ ad: Any, error: AdSdk.AdError)
  func onInterstitialCloseStarted(_ ad: Any)
  func onInterstitialCloseCompleted(_ ad: Any)
  func onInterstitialCloseFailed(_ ad: Any, error: AdSdk.AdError)
  func onInterstitialShowDuration(_ ad: Any, duration: Foundation.TimeInterval)
  func onInterstitialShowPercentage(_ ad: Any, percentage: Swift.Float)
  func onInterstitialContentLoadProgress(_ ad: Any, progress: Swift.Float)
  func onInterstitialContentRendered(_ ad: Any)
  func onInterstitialPreloadCompleted(_ ad: Any)
  func onInterstitialPreloadFailed(_ ad: Any, error: AdSdk.AdError)
  func onInterstitialShowStateChanged(_ ad: Any, oldState: Swift.String, newState: Swift.String)
  func onInterstitialShowQuality(_ ad: Any, quality: Swift.Float)
  func onInterstitialShowTiming(_ ad: Any, timing: Swift.String)
  func onInterstitialShowEnvironmentChanged(_ ad: Any, environment: [Swift.String : Any])
}
extension AdSdk.InterstitialListener {
  public func onInterstitialReadyToShow(_ ad: Any)
  public func onInterstitialShowStarted(_ ad: Any)
  public func onInterstitialShowCompleted(_ ad: Any)
  public func onInterstitialShowFailed(_ ad: Any, error: AdSdk.AdError)
  public func onInterstitialCloseStarted(_ ad: Any)
  public func onInterstitialCloseCompleted(_ ad: Any)
  public func onInterstitialCloseFailed(_ ad: Any, error: AdSdk.AdError)
  public func onInterstitialShowDuration(_ ad: Any, duration: Foundation.TimeInterval)
  public func onInterstitialShowPercentage(_ ad: Any, percentage: Swift.Float)
  public func onInterstitialContentLoadProgress(_ ad: Any, progress: Swift.Float)
  public func onInterstitialContentRendered(_ ad: Any)
  public func onInterstitialPreloadCompleted(_ ad: Any)
  public func onInterstitialPreloadFailed(_ ad: Any, error: AdSdk.AdError)
  public func onInterstitialShowStateChanged(_ ad: Any, oldState: Swift.String, newState: Swift.String)
  public func onInterstitialShowQuality(_ ad: Any, quality: Swift.Float)
  public func onInterstitialShowTiming(_ ad: Any, timing: Swift.String)
  public func onInterstitialShowEnvironmentChanged(_ ad: Any, environment: [Swift.String : Any])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class ListenerManager : ObjectiveC.NSObject {
  @objc public static let shared: AdSdk.ListenerManager
  @objc public func addListener(_ listener: Swift.AnyObject, type: Swift.String)
  @objc public func removeListener(_ listener: Swift.AnyObject, type: Swift.String)
  @objc public func removeAllListeners(type: Swift.String)
  @objc public func getListeners(type: Swift.String) -> [Swift.AnyObject]
  @objc public func notifyListeners(type: Swift.String, selector: Swift.String, parameters: [Any] = [])
  @objc public func notifyBannerListeners(selector: Swift.String, parameters: [Any] = [])
  @objc public func notifyInterstitialListeners(selector: Swift.String, parameters: [Any] = [])
  @objc public func notifyNativeListeners(selector: Swift.String, parameters: [Any] = [])
  @objc public func notifyRewardVideoListeners(selector: Swift.String, parameters: [Any] = [])
  @objc public func notifySplashListeners(selector: Swift.String, parameters: [Any] = [])
  @objc public func cleanupInvalidListeners()
  @objc public func getListenerStats() -> [Swift.String : Swift.Int]
  @objc deinit
}
extension AdSdk.ListenerManager {
  public func addBannerListener(_ listener: any AdSdk.BannerListener)
  public func addInterstitialListener(_ listener: any AdSdk.InterstitialListener)
  public func addNativeListener(_ listener: any AdSdk.NativeListener)
  public func addRewardVideoListener(_ listener: any AdSdk.RewardVideoListener)
  public func addSplashListener(_ listener: any AdSdk.SplashListener)
  public func removeBannerListener(_ listener: any AdSdk.BannerListener)
  public func removeInterstitialListener(_ listener: any AdSdk.InterstitialListener)
  public func removeNativeListener(_ listener: any AdSdk.NativeListener)
  public func removeRewardVideoListener(_ listener: any AdSdk.RewardVideoListener)
  public func removeSplashListener(_ listener: any AdSdk.SplashListener)
}
public struct ListenerTypes {
  public static let INTERSTITIAL: Swift.String
  public static let BANNER: Swift.String
  public static let REWARD_VIDEO: Swift.String
  public static let NATIVE: Swift.String
  public static let SPLASH: Swift.String
  public static let EVENT_LOAD: Swift.String
  public static let EVENT_SHOW: Swift.String
  public static let EVENT_CLICK: Swift.String
  public static let EVENT_CLOSE: Swift.String
  public static let EVENT_PLAY: Swift.String
  public static let EVENT_IMPRESSION: Swift.String
  public static let EVENT_ERROR: Swift.String
  public static let STATUS_UNLOADED: Swift.String
  public static let STATUS_LOADING: Swift.String
  public static let STATUS_LOADED: Swift.String
  public static let STATUS_LOAD_FAILED: Swift.String
  public static let STATUS_SHOWING: Swift.String
  public static let STATUS_SHOWN: Swift.String
  public static let STATUS_SHOW_FAILED: Swift.String
  public static let STATUS_CLOSED: Swift.String
  public static let STATUS_PLAYING: Swift.String
  public static let STATUS_PLAY_COMPLETED: Swift.String
  public static let STATUS_PLAY_FAILED: Swift.String
  public static let STATUS_PAUSED: Swift.String
  public static let STATUS_SKIPPED: Swift.String
  public static let NETWORK_WIFI: Swift.String
  public static let NETWORK_CELLULAR: Swift.String
  public static let NETWORK_NONE: Swift.String
  public static let NETWORK_UNKNOWN: Swift.String
  public static let ERROR_INTERNAL: Swift.String
  public static let ERROR_NETWORK: Swift.String
  public static let ERROR_TIMEOUT: Swift.String
  public static let ERROR_NO_FILL: Swift.String
  public static let ERROR_INVALID_REQUEST: Swift.String
  public static let ERROR_CONFIG: Swift.String
  public static let ERROR_LOAD: Swift.String
  public static let ERROR_SHOW: Swift.String
  public static let ERROR_LIFECYCLE: Swift.String
  public static let QUALITY_EXCELLENT: Swift.String
  public static let QUALITY_GOOD: Swift.String
  public static let QUALITY_FAIR: Swift.String
  public static let QUALITY_POOR: Swift.String
  public static let TIMING_APP_LAUNCH: Swift.String
  public static let TIMING_PAGE_CHANGE: Swift.String
  public static let TIMING_USER_ACTION: Swift.String
  public static let TIMING_SCHEDULED: Swift.String
  public static let TIMING_CONDITIONAL: Swift.String
  public static let ENV_DEVICE_MODEL: Swift.String
  public static let ENV_SYSTEM_VERSION: Swift.String
  public static let ENV_APP_VERSION: Swift.String
  public static let ENV_NETWORK_TYPE: Swift.String
  public static let ENV_SCREEN_SIZE: Swift.String
  public static let ENV_DEVICE_ORIENTATION: Swift.String
  public static let ENV_TIMESTAMP: Swift.String
  public static let ENV_USER_ID: Swift.String
  public static let ENV_SESSION_ID: Swift.String
  public static let METRIC_LOAD_TIME: Swift.String
  public static let METRIC_SHOW_TIME: Swift.String
  public static let METRIC_RENDER_TIME: Swift.String
  public static let METRIC_MEMORY_USAGE: Swift.String
  public static let METRIC_CPU_USAGE: Swift.String
  public static let METRIC_NETWORK_LATENCY: Swift.String
  public static let METRIC_CACHE_HIT_RATE: Swift.String
  public static let METRIC_ERROR_RATE: Swift.String
  public static let METRIC_SUCCESS_RATE: Swift.String
  public static let METRIC_RESPONSE_TIME: Swift.String
}
extension AdSdk.ListenerTypes {
  public static var allAdTypes: [Swift.String] {
    get
  }
  public static var allEventTypes: [Swift.String] {
    get
  }
  public static var allStatusTypes: [Swift.String] {
    get
  }
  public static var allNetworkTypes: [Swift.String] {
    get
  }
  public static var allErrorTypes: [Swift.String] {
    get
  }
  public static var allQualityLevels: [Swift.String] {
    get
  }
  public static var allShowTimings: [Swift.String] {
    get
  }
  public static func isValidAdType(_ type: Swift.String) -> Swift.Bool
  public static func isValidEventType(_ type: Swift.String) -> Swift.Bool
  public static func isValidStatusType(_ type: Swift.String) -> Swift.Bool
  public static func isValidNetworkType(_ type: Swift.String) -> Swift.Bool
  public static func isValidErrorType(_ type: Swift.String) -> Swift.Bool
  public static func isValidQualityLevel(_ level: Swift.String) -> Swift.Bool
  public static func isValidShowTiming(_ timing: Swift.String) -> Swift.Bool
}
@objc public protocol NativeListener : AdSdk.AdListener {
  @objc optional func onNativeAssetsLoaded(_ ad: Any, assets: [Swift.String : Any])
  @objc optional func onNativeAssetsLoadFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onNativeAssetsRendered(_ ad: Any)
  @objc optional func onNativeAssetsRenderFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onNativeTitleLoaded(_ ad: Any, title: Swift.String)
  @objc optional func onNativeDescriptionLoaded(_ ad: Any, description: Swift.String)
  @objc optional func onNativeIconLoaded(_ ad: Any, iconUrl: Swift.String)
  @objc optional func onNativeImagesLoaded(_ ad: Any, imageUrls: [Swift.String])
  @objc optional func onNativeVideoLoaded(_ ad: Any, videoUrl: Swift.String)
  @objc optional func onNativeVideoPlayStarted(_ ad: Any)
  @objc optional func onNativeVideoPlayCompleted(_ ad: Any)
  @objc optional func onNativeVideoPlayProgress(_ ad: Any, progress: Swift.Float)
  @objc optional func onNativeVideoPlayFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onNativeCTALoaded(_ ad: Any, ctaText: Swift.String)
  @objc optional func onNativeCTAClicked(_ ad: Any)
  @objc optional func onNativeBrandInfoLoaded(_ ad: Any, brandInfo: [Swift.String : Any])
  @objc optional func onNativePriceInfoLoaded(_ ad: Any, priceInfo: [Swift.String : Any])
  @objc optional func onNativeRatingLoaded(_ ad: Any, rating: Swift.Float, maxRating: Swift.Float)
  @objc optional func onNativeReviewCountLoaded(_ ad: Any, reviewCount: Swift.Int)
  @objc optional func onNativeContentTypeChanged(_ ad: Any, contentType: Swift.String)
  @objc optional func onNativeLayoutChanged(_ ad: Any, layout: [Swift.String : Any])
  @objc optional func onNativeAssetsQuality(_ ad: Any, quality: Swift.Float)
  @objc optional func onNativeAssetsSize(_ ad: Any, size: Swift.Int64)
  @objc optional func onNativeVisibilityChanged(_ ad: Any, isVisible: Swift.Bool, visibilityPercentage: Swift.Float)
  @objc optional func onNativeImpression(_ ad: Any)
  @objc optional func onNativeClicked(_ ad: Any)
  @objc optional func onNativeActionButtonClicked(_ ad: Any)
}
extension AdSdk.NativeListener {
  public func onNativeAssetsLoaded(_ ad: Any, assets: [Swift.String : Any])
  public func onNativeAssetsLoadFailed(_ ad: Any, error: AdSdk.AdError)
  public func onNativeAssetsRendered(_ ad: Any)
  public func onNativeAssetsRenderFailed(_ ad: Any, error: AdSdk.AdError)
  public func onNativeTitleLoaded(_ ad: Any, title: Swift.String)
  public func onNativeDescriptionLoaded(_ ad: Any, description: Swift.String)
  public func onNativeIconLoaded(_ ad: Any, iconUrl: Swift.String)
  public func onNativeImagesLoaded(_ ad: Any, imageUrls: [Swift.String])
  public func onNativeVideoLoaded(_ ad: Any, videoUrl: Swift.String)
  public func onNativeVideoPlayStarted(_ ad: Any)
  public func onNativeVideoPlayCompleted(_ ad: Any)
  public func onNativeVideoPlayProgress(_ ad: Any, progress: Swift.Float)
  public func onNativeVideoPlayFailed(_ ad: Any, error: AdSdk.AdError)
  public func onNativeCTALoaded(_ ad: Any, ctaText: Swift.String)
  public func onNativeCTAClicked(_ ad: Any)
  public func onNativeBrandInfoLoaded(_ ad: Any, brandInfo: [Swift.String : Any])
  public func onNativePriceInfoLoaded(_ ad: Any, priceInfo: [Swift.String : Any])
  public func onNativeRatingLoaded(_ ad: Any, rating: Swift.Float, maxRating: Swift.Float)
  public func onNativeReviewCountLoaded(_ ad: Any, reviewCount: Swift.Int)
  public func onNativeContentTypeChanged(_ ad: Any, contentType: Swift.String)
  public func onNativeLayoutChanged(_ ad: Any, layout: [Swift.String : Any])
  public func onNativeAssetsQuality(_ ad: Any, quality: Swift.Float)
  public func onNativeAssetsSize(_ ad: Any, size: Swift.Int64)
  public func onNativeVisibilityChanged(_ ad: Any, isVisible: Swift.Bool, visibilityPercentage: Swift.Float)
  public func onNativeImpression(_ ad: Any)
  public func onNativeClicked(_ ad: Any)
  public func onNativeActionButtonClicked(_ ad: Any)
}
@objc public protocol RewardVideoListener : AdSdk.AdListener {
  @objc optional func onRewardVideoVerificationStarted(_ ad: Any)
  @objc optional func onRewardVideoVerificationCompleted(_ ad: Any, reward: [Swift.String : Any])
  @objc optional func onRewardVideoVerificationFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onRewardVideoRewardStarted(_ ad: Any, reward: [Swift.String : Any])
  @objc optional func onRewardVideoRewardCompleted(_ ad: Any, reward: [Swift.String : Any])
  @objc optional func onRewardVideoRewardFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onRewardVideoPlayStarted(_ ad: Any)
  @objc optional func onRewardVideoPlayCompleted(_ ad: Any)
  @objc optional func onRewardVideoPlayProgress(_ ad: Any, progress: Swift.Float)
  @objc optional func onRewardVideoPlayFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onRewardVideoPlayPaused(_ ad: Any)
  @objc optional func onRewardVideoPlayResumed(_ ad: Any)
  @objc optional func onRewardVideoPlaySkipped(_ ad: Any)
  @objc optional func onRewardVideoPlayDuration(_ ad: Any, duration: Foundation.TimeInterval)
  @objc optional func onRewardVideoPlayQuality(_ ad: Any, quality: Swift.Float)
  @objc optional func onRewardVideoNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  @objc optional func onRewardVideoBufferingStarted(_ ad: Any)
  @objc optional func onRewardVideoBufferingCompleted(_ ad: Any)
  @objc optional func onRewardVideoBufferingProgress(_ ad: Any, progress: Swift.Float)
  @objc optional func onRewardVideoBufferingFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onRewardVideoPreloadCompleted(_ ad: Any)
  @objc optional func onRewardVideoPreloadFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onRewardVideoShowTiming(_ ad: Any, timing: Swift.String)
  @objc optional func onRewardVideoShowEnvironmentChanged(_ ad: Any, environment: [Swift.String : Any])
  @objc optional func onRewardVideoUserBehavior(_ ad: Any, behavior: Swift.String, details: [Swift.String : Any])
  @objc optional func onRewardVideoStarted(_ ad: Any)
  @objc optional func onRewardVideoCompleted(_ ad: Any)
  @objc optional func onRewardVideoRewarded(_ ad: Any, rewardType: Swift.String, rewardAmount: Swift.Int)
  @objc optional func onRewardVideoSkipped(_ ad: Any)
  @objc optional func onRewardVideoClosed(_ ad: Any)
}
extension AdSdk.RewardVideoListener {
  public func onRewardVideoVerificationStarted(_ ad: Any)
  public func onRewardVideoVerificationCompleted(_ ad: Any, reward: [Swift.String : Any])
  public func onRewardVideoVerificationFailed(_ ad: Any, error: AdSdk.AdError)
  public func onRewardVideoRewardStarted(_ ad: Any, reward: [Swift.String : Any])
  public func onRewardVideoRewardCompleted(_ ad: Any, reward: [Swift.String : Any])
  public func onRewardVideoRewardFailed(_ ad: Any, error: AdSdk.AdError)
  public func onRewardVideoPlayStarted(_ ad: Any)
  public func onRewardVideoPlayCompleted(_ ad: Any)
  public func onRewardVideoPlayProgress(_ ad: Any, progress: Swift.Float)
  public func onRewardVideoPlayFailed(_ ad: Any, error: AdSdk.AdError)
  public func onRewardVideoPlayPaused(_ ad: Any)
  public func onRewardVideoPlayResumed(_ ad: Any)
  public func onRewardVideoPlaySkipped(_ ad: Any)
  public func onRewardVideoPlayDuration(_ ad: Any, duration: Foundation.TimeInterval)
  public func onRewardVideoPlayQuality(_ ad: Any, quality: Swift.Float)
  public func onRewardVideoNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  public func onRewardVideoBufferingStarted(_ ad: Any)
  public func onRewardVideoBufferingCompleted(_ ad: Any)
  public func onRewardVideoBufferingProgress(_ ad: Any, progress: Swift.Float)
  public func onRewardVideoBufferingFailed(_ ad: Any, error: AdSdk.AdError)
  public func onRewardVideoPreloadCompleted(_ ad: Any)
  public func onRewardVideoPreloadFailed(_ ad: Any, error: AdSdk.AdError)
  public func onRewardVideoShowTiming(_ ad: Any, timing: Swift.String)
  public func onRewardVideoShowEnvironmentChanged(_ ad: Any, environment: [Swift.String : Any])
  public func onRewardVideoUserBehavior(_ ad: Any, behavior: Swift.String, details: [Swift.String : Any])
  public func onRewardVideoStarted(_ ad: Any)
  public func onRewardVideoCompleted(_ ad: Any)
  public func onRewardVideoRewarded(_ ad: Any, rewardType: Swift.String, rewardAmount: Swift.Int)
  public func onRewardVideoSkipped(_ ad: Any)
  public func onRewardVideoClosed(_ ad: Any)
}
@objc public protocol SplashListener : AdSdk.AdListener {
  @objc optional func onSplashReadyToShow(_ ad: Any)
  @objc optional func onSplashShowStarted(_ ad: Any)
  @objc optional func onSplashShowCompleted(_ ad: Any)
  @objc optional func onSplashShowFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onSplashCloseStarted(_ ad: Any)
  @objc optional func onSplashCloseCompleted(_ ad: Any)
  @objc optional func onSplashCloseFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onSplashShowDuration(_ ad: Any, duration: Foundation.TimeInterval)
  @objc optional func onSplashCountdown(_ ad: Any, countdown: Swift.Int)
  @objc optional func onSplashSkipClicked(_ ad: Any)
  @objc optional func onSplashClicked(_ ad: Any)
  @objc optional func onSplashSkipButtonShown(_ ad: Any)
  @objc optional func onSplashSkipButtonHidden(_ ad: Any)
  @objc optional func onSplashContentLoadProgress(_ ad: Any, progress: Swift.Float)
  @objc optional func onSplashContentRendered(_ ad: Any)
  @objc optional func onSplashPreloadCompleted(_ ad: Any)
  @objc optional func onSplashPreloadFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onSplashShowStateChanged(_ ad: Any, oldState: Swift.String, newState: Swift.String)
  @objc optional func onSplashShowQuality(_ ad: Any, quality: Swift.Float)
  @objc optional func onSplashShowTiming(_ ad: Any, timing: Swift.String)
  @objc optional func onSplashShowEnvironmentChanged(_ ad: Any, environment: [Swift.String : Any])
  @objc optional func onSplashAppLaunchCompleted(_ ad: Any)
  @objc optional func onSplashAppLaunchFailed(_ ad: Any, error: AdSdk.AdError)
  @objc optional func onSplashNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  @objc optional func onSplashDeviceStatusChanged(_ ad: Any, deviceInfo: [Swift.String : Any])
  @objc optional func onSplashUserBehavior(_ ad: Any, behavior: Swift.String, details: [Swift.String : Any])
}
extension AdSdk.SplashListener {
  public func onSplashReadyToShow(_ ad: Any)
  public func onSplashShowStarted(_ ad: Any)
  public func onSplashShowCompleted(_ ad: Any)
  public func onSplashShowFailed(_ ad: Any, error: AdSdk.AdError)
  public func onSplashCloseStarted(_ ad: Any)
  public func onSplashCloseCompleted(_ ad: Any)
  public func onSplashCloseFailed(_ ad: Any, error: AdSdk.AdError)
  public func onSplashShowDuration(_ ad: Any, duration: Foundation.TimeInterval)
  public func onSplashCountdown(_ ad: Any, countdown: Swift.Int)
  public func onSplashSkipClicked(_ ad: Any)
  public func onSplashClicked(_ ad: Any)
  public func onSplashSkipButtonShown(_ ad: Any)
  public func onSplashSkipButtonHidden(_ ad: Any)
  public func onSplashContentLoadProgress(_ ad: Any, progress: Swift.Float)
  public func onSplashContentRendered(_ ad: Any)
  public func onSplashPreloadCompleted(_ ad: Any)
  public func onSplashPreloadFailed(_ ad: Any, error: AdSdk.AdError)
  public func onSplashShowStateChanged(_ ad: Any, oldState: Swift.String, newState: Swift.String)
  public func onSplashShowQuality(_ ad: Any, quality: Swift.Float)
  public func onSplashShowTiming(_ ad: Any, timing: Swift.String)
  public func onSplashShowEnvironmentChanged(_ ad: Any, environment: [Swift.String : Any])
  public func onSplashAppLaunchCompleted(_ ad: Any)
  public func onSplashAppLaunchFailed(_ ad: Any, error: AdSdk.AdError)
  public func onSplashNetworkStatusChanged(_ ad: Any, networkType: Swift.String, isConnected: Swift.Bool)
  public func onSplashDeviceStatusChanged(_ ad: Any, deviceInfo: [Swift.String : Any])
  public func onSplashUserBehavior(_ ad: Any, behavior: Swift.String, details: [Swift.String : Any])
}
@objc open class BaseAdLoader : ObjectiveC.NSObject, AdSdk.AdLoader {
  public init(ad: AdSdk.BaseAd)
  public func loadAd(posid: Swift.String)
  public func showAd(posid: Swift.String)
  public func onResumed()
  public func onPaused()
  public func cleanup()
  @objc deinit
}
public class AdStrategy {
  public init(currentAd: AdSdk.BaseAd?)
  public func loadAd(posid: Swift.String, adType: AdSdk.AdType) async throws
  public func getLoadedAdapters(posid: Swift.String) -> [any AdSdk.AdAdapter]
  public func getLoadedAdaptersSorted(posid: Swift.String) -> [any AdSdk.AdAdapter]
  public func release(posid: Swift.String)
  public func releaseAll()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LoadingStrategyFactory {
  public static func createStrategy(adType: AdSdk.AdType) -> any AdSdk.LoadingStrategy
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AESCrypto {
  public static func encryptECB(_ plainText: Swift.String, key: Swift.String) -> Swift.String?
  public static func decryptECB(_ encryptedText: Swift.String, key: Swift.String) -> Swift.String?
  public static func generateRandomKey(length: Swift.Int = 16) -> Swift.String
  public static func hexString(from data: Foundation.Data) -> Swift.String
  public static func dataFromHexString(_ hexString: Swift.String) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ALog {
  public static func d(_ tag: Swift.String, _ message: Swift.String)
  public static func i(_ tag: Swift.String, _ message: Swift.String)
  public static func w(_ tag: Swift.String, _ message: Swift.String)
  public static func e(_ tag: Swift.String, _ message: Swift.String)
  public static func e(_ tag: Swift.String, _ message: Swift.String, _ error: any Swift.Error)
  public static func isDebugEnabled() -> Swift.Bool
  public static func setLogEnabled(_ enabled: Swift.Bool)
  public static func setTestMode(_ testMode: Swift.Bool)
  public static func logPerformance(_ tag: Swift.String, _ operation: Swift.String, startTime: Foundation.Date)
  public static func logNetwork(_ tag: Swift.String, _ method: Swift.String, _ url: Swift.String, _ statusCode: Swift.Int? = nil, _ duration: Foundation.TimeInterval? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Url {
  public static func build(args: [Swift.String]) -> Swift.String
  @objc deinit
}
public class WeakReference<T> where T : AnyObject {
  public var value: T? {
    get
  }
  public init(_ value: T?)
  public var isValid: Swift.Bool {
    get
  }
  public func invalidate()
  @objc deinit
}
public class WeakArray<T> where T : AnyObject {
  public init()
  public func append(_ item: T)
  public func remove(_ item: T)
  public func removeAll()
  public var count: Swift.Int {
    get
  }
  public var allObjects: [T] {
    get
  }
  public func forEach(_ body: (T) -> Swift.Void)
  public func first(where predicate: (T) -> Swift.Bool) -> T?
  public func contains(where predicate: (T) -> Swift.Bool) -> Swift.Bool
  @objc deinit
}
public class WeakDictionary<Key, Value> where Key : Swift.Hashable, Value : AnyObject {
  public init()
  public subscript(key: Key) -> Value? {
    get
    set
  }
  public func removeValue(forKey key: Key)
  public func removeAll()
  public var count: Swift.Int {
    get
  }
  public var keys: [Key] {
    get
  }
  public var values: [Value] {
    get
  }
  public func forEach(_ body: (Key, Value) -> Swift.Void)
  @objc deinit
}
public class WeakSet<T> where T : AnyObject, T : Swift.Hashable {
  public init()
  public func insert(_ item: T)
  public func remove(_ item: T)
  public func removeAll()
  public func contains(_ item: T) -> Swift.Bool
  public var count: Swift.Int {
    get
  }
  public var allObjects: Swift.Set<T> {
    get
  }
  public func forEach(_ body: (T) -> Swift.Void)
  @objc deinit
}
extension AdSdk.WeakReference : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: AdSdk.WeakReference<T>, rhs: AdSdk.WeakReference<T>) -> Swift.Bool
}
extension AdSdk.WeakReference : Swift.Hashable where T : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AdSdk.WeakReference<T>, rhs: AdSdk.WeakReference<T>) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension AdSdk.WeakArray {
  public func safelyIterate(_ body: (T) -> Swift.Void)
  public func safelyModify(_ body: @escaping (inout [AdSdk.WeakReference<T>]) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class WebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL, title: Swift.String = "广告详情")
  @_Concurrency.MainActor @preconcurrency public init(urlString: Swift.String, title: Swift.String = "广告详情")
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
extension AdSdk.WebViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
extension AdSdk.WebViewController : WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor @preconcurrency public func executeJavaScript(_ script: Swift.String, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func getTitle(completion: @escaping (Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func getCurrentURL(completion: @escaping (Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func scrollToTop()
  @_Concurrency.MainActor @preconcurrency public func scrollToBottom()
  @_Concurrency.MainActor @preconcurrency public func setZoomScale(_ scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func hideElement(selector: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func showElement(selector: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func injectCSS(_ css: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func injectJavaScript(_ script: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func takeScreenshot(completion: @escaping (UIKit.UIImage?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func containsText(_ text: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func highlightText(_ text: Swift.String, color: Swift.String = "yellow", completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var isLoading: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var loadingProgress: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var historyCount: Swift.Int {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func clearCache()
  @_Concurrency.MainActor @preconcurrency public func setUserAgent(_ userAgent: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func getUserAgent() -> Swift.String?
  @_Concurrency.MainActor @preconcurrency public func disableSelection()
  @_Concurrency.MainActor @preconcurrency public func enableSelection()
  @_Concurrency.MainActor @preconcurrency public func disableZoom()
  @_Concurrency.MainActor @preconcurrency public func setBackgroundColor(_ color: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func hideScrollbars()
  @_Concurrency.MainActor @preconcurrency public func showScrollbars()
  @_Concurrency.MainActor @preconcurrency public func getAllLinks(completion: @escaping ([Swift.String]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func getAllImages(completion: @escaping ([Swift.String]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var isJavaScriptEnabled: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func enableJavaScript()
  @_Concurrency.MainActor @preconcurrency public func disableJavaScript()
  @_Concurrency.MainActor @preconcurrency public func getContentLength(completion: @escaping (Swift.Int) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func containsAds(completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func removeAds(completion: @escaping (Swift.Int) -> Swift.Void)
}
extension WebKit.WKWebViewConfiguration {
  @_Concurrency.MainActor @preconcurrency public static func createAdConfiguration() -> WebKit.WKWebViewConfiguration
  @_Concurrency.MainActor @preconcurrency public static func createSecureConfiguration() -> WebKit.WKWebViewConfiguration
}
@_hasMissingDesignatedInitializers public class WebViewUtils {
  public static func isValidURL(_ urlString: Swift.String) -> Swift.Bool
  public static func getDomain(from urlString: Swift.String) -> Swift.String?
  public static func buildURL(baseURL: Swift.String, path: Swift.String? = nil, parameters: [Swift.String : Swift.String]? = nil) -> Swift.String?
  public static func encodeParameters(_ parameters: [Swift.String : Swift.String]) -> Swift.String
  public static func decodeParameters(_ queryString: Swift.String) -> [Swift.String : Swift.String]
  public static func getUserAgent() -> Swift.String
  public static func createAdHeaders() -> [Swift.String : Swift.String]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebViewManager {
  public static let shared: AdSdk.WebViewManager
  public func openWebView(url: Swift.String, title: Swift.String = "广告详情", from viewController: UIKit.UIViewController, animated: Swift.Bool = true)
  public func openWebView(url: Foundation.URL, title: Swift.String = "广告详情", from viewController: UIKit.UIViewController, animated: Swift.Bool = true)
  public func canOpenURL(_ urlString: Swift.String) -> Swift.Bool
  public func isValidURL(_ urlString: Swift.String) -> Swift.Bool
  public func getDomain(from urlString: Swift.String) -> Swift.String?
  public func buildURL(baseURL: Swift.String, path: Swift.String? = nil, parameters: [Swift.String : Swift.String]? = nil) -> Swift.String?
  @objc deinit
}
extension AdSdk.WebViewManager {
  public struct WebViewConfig {
    public let allowsInlineMediaPlayback: Swift.Bool
    public let allowsBackForwardNavigationGestures: Swift.Bool
    public let allowsLinkPreview: Swift.Bool
    public let scrollViewBounces: Swift.Bool
    public let timeoutInterval: Foundation.TimeInterval
    public init(allowsInlineMediaPlayback: Swift.Bool = true, allowsBackForwardNavigationGestures: Swift.Bool = true, allowsLinkPreview: Swift.Bool = false, scrollViewBounces: Swift.Bool = false, timeoutInterval: Foundation.TimeInterval = 30.0)
  }
  public static let defaultConfig: AdSdk.WebViewManager.WebViewConfig
  public static let adConfig: AdSdk.WebViewManager.WebViewConfig
}
@objc @_inheritsConvenienceInitializers public class WebViewTest : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func runAllTests(completion: @escaping ([Swift.String : Swift.Bool]) -> Swift.Void)
  public func testURL(_ url: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func generateTestReport() -> Swift.String
  public func testWebViewManager(from viewController: UIKit.UIViewController)
  @objc deinit
}
extension AdSdk.WebViewTest : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
}
extension AdSdk.AdType : Swift.Equatable {}
extension AdSdk.AdType : Swift.Hashable {}
extension AdSdk.AdType : Swift.RawRepresentable {}
extension AdSdk.CustomAdType : Swift.Equatable {}
extension AdSdk.CustomAdType : Swift.Hashable {}
extension AdSdk.CustomAdType : Swift.RawRepresentable {}
extension AdSdk.DeviceType : Swift.Equatable {}
extension AdSdk.DeviceType : Swift.Hashable {}
extension AdSdk.DeviceType : Swift.RawRepresentable {}
extension AdSdk.NetworkType : Swift.Equatable {}
extension AdSdk.NetworkType : Swift.Hashable {}
extension AdSdk.NetworkType : Swift.RawRepresentable {}
